#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.296
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FT_Utils
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FT")]
	public partial class DictDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertDIC_ApprovedState(DIC_ApprovedState instance);
    partial void UpdateDIC_ApprovedState(DIC_ApprovedState instance);
    partial void DeleteDIC_ApprovedState(DIC_ApprovedState instance);
    #endregion
		
		public DictDataContext() : 
				base("", mappingSource)
		{
			OnCreated();
		}
		
		public DictDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DictDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DictDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DictDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DIC_ApprovedState> DIC_ApprovedState
		{
			get
			{
				return this.GetTable<DIC_ApprovedState>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DIC_ApprovedState")]
	public partial class DIC_ApprovedState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ApprovedStateCode;
		
		private string _ApprovedStateChinese;
		
		private string _ApprovedStateEnglish;
		
		private string _Notes;
		
		private int _DisplayOrder;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApprovedStateCodeChanging(string value);
    partial void OnApprovedStateCodeChanged();
    partial void OnApprovedStateChineseChanging(string value);
    partial void OnApprovedStateChineseChanged();
    partial void OnApprovedStateEnglishChanging(string value);
    partial void OnApprovedStateEnglishChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnDisplayOrderChanging(int value);
    partial void OnDisplayOrderChanged();
    #endregion
		
		public DIC_ApprovedState()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedStateCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ApprovedStateCode
		{
			get
			{
				return this._ApprovedStateCode;
			}
			set
			{
				if ((this._ApprovedStateCode != value))
				{
					this.OnApprovedStateCodeChanging(value);
					this.SendPropertyChanging();
					this._ApprovedStateCode = value;
					this.SendPropertyChanged("ApprovedStateCode");
					this.OnApprovedStateCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedStateChinese", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string ApprovedStateChinese
		{
			get
			{
				return this._ApprovedStateChinese;
			}
			set
			{
				if ((this._ApprovedStateChinese != value))
				{
					this.OnApprovedStateChineseChanging(value);
					this.SendPropertyChanging();
					this._ApprovedStateChinese = value;
					this.SendPropertyChanged("ApprovedStateChinese");
					this.OnApprovedStateChineseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovedStateEnglish", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string ApprovedStateEnglish
		{
			get
			{
				return this._ApprovedStateEnglish;
			}
			set
			{
				if ((this._ApprovedStateEnglish != value))
				{
					this.OnApprovedStateEnglishChanging(value);
					this.SendPropertyChanging();
					this._ApprovedStateEnglish = value;
					this.SendPropertyChanged("ApprovedStateEnglish");
					this.OnApprovedStateEnglishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(100)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int NOT NULL")]
		public int DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
